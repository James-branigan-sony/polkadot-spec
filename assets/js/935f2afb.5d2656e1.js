"use strict";(self.webpackChunkspec_website=self.webpackChunkspec_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Protocol","href":"/id-polkadot-protocol","docId":"id-polkadot-protocol","unlisted":false},{"type":"category","label":"Host","collapsed":false,"items":[{"type":"link","label":"1. Overview","href":"/chap-overview","docId":"chap-overview","unlisted":false},{"type":"link","label":"2. States and Transitions","href":"/chap-state","docId":"chap-state","unlisted":false},{"type":"link","label":"3. Synchronization","href":"/chap-sync","docId":"chap-sync","unlisted":false},{"type":"link","label":"4. Networking","href":"/chap-networking","docId":"chap-networking","unlisted":false},{"type":"link","label":"5. Block Production","href":"/sect-block-production","docId":"sect-block-production","unlisted":false},{"type":"link","label":"6. Finality","href":"/sect-finality","docId":"sect-finality","unlisted":false},{"type":"link","label":"7. Light Clients","href":"/sect-lightclient","docId":"sect-lightclient","unlisted":false},{"type":"link","label":"8. Availability & Validity","href":"/chapter-anv","docId":"chapter-anv","unlisted":false}],"collapsible":true,"href":"/part-polkadot-host"},{"type":"category","label":"Runtime","collapsed":false,"items":[{"type":"link","label":"9. Extrinsics","href":"/id-extrinsics","docId":"id-extrinsics","unlisted":false},{"type":"link","label":"10. Weights","href":"/id-weights","docId":"id-weights","unlisted":false},{"type":"link","label":"11. Consensus","href":"/id-consensus","docId":"id-consensus","unlisted":false},{"type":"link","label":"12. Metadata","href":"/sect-metadata","docId":"sect-metadata","unlisted":false}],"collapsible":true,"href":"/part-polkadot-runtime"},{"type":"category","label":"Implementation Guide","collapsed":false,"items":[{"type":"link","label":"FAQ","href":"/Implementation Guide/faq","docId":"Implementation Guide/faq","unlisted":false}],"collapsible":true,"href":"/Implementation Guide/"},{"type":"link","label":"Appendix A: Cryptography & Encoding","href":"/id-cryptography-encoding","docId":"id-cryptography-encoding","unlisted":false},{"type":"link","label":"Appendix B: Host API","href":"/chap-host-api","docId":"chap-host-api","unlisted":false},{"type":"link","label":"Appendix C: Runtime API","href":"/chap-runtime-api","docId":"chap-runtime-api","unlisted":false},{"type":"link","label":"Glossary","href":"/id-glossary","docId":"id-glossary","unlisted":false}]},"docs":{"chap-host-api":{"id":"chap-host-api","title":"Appendix B: Host API","description":"Description of the expected environment available for import by the Polkadot Runtime","sidebar":"tutorialSidebar"},"chap-networking":{"id":"chap-networking","title":"4. Networking","description":"This chapter, in its current form, is incomplete and considered work in progress. Authors appreciate receiving requests for clarification or any reports regarding deviation from the current Polkadot network protocol. This can be done by filing an issue in Polkadot Specification repository.","sidebar":"tutorialSidebar"},"chap-overview":{"id":"chap-overview","title":"1. Overview","description":"The Polkadot Protocol differentiates between different classes of Polkadot Hosts. Each class differs in its trust roots and how active or passively they interact with the network.","sidebar":"tutorialSidebar"},"chap-runtime-api":{"id":"chap-runtime-api","title":"Appendix C: Runtime API","description":"Description of how to interact with the Runtime through its exported functions","sidebar":"tutorialSidebar"},"chap-state":{"id":"chap-state","title":"2. States and Transitions","description":"2.1. Introduction","sidebar":"tutorialSidebar"},"chap-sync":{"id":"chap-sync","title":"3. Synchronization","description":"Many applications that interact with the Polkadot network, to some extent, must be able to retrieve certain information about the network. Depending on the utility, this includes validators that interact with Polkadot\u2019s consensus and need access to the full state, either from the past or just the most up-to-date state, or light clients that are only interested in the minimum information required in order to verify some claims about the state of the network, such as the balance of a specific account. To allow implementations to quickly retrieve the required information, different types of synchronization protocols are available, respectively Full, Fast, and Warp sync suited for different needs.","sidebar":"tutorialSidebar"},"chapter-anv":{"id":"chapter-anv","title":"8. Availability & Validity","description":"Polkadot serves as a replicated shared-state machine designed to resolve scalability issues and interoperability among blockchains. The validators of Polkadot execute transactions and participate in the consensus of Polkadots primary chain, the so-called relay chain. Parachains are independent networks that maintain their own state and are connected to the relay chain. Those parachains can take advantage of the relay chain consensus mechanism, including sending and receiving messages to and from other parachains. Parachain nodes that send parachain blocks, known as candidates, to the validators in order to be included in relay chain are referred to as collators.","sidebar":"tutorialSidebar"},"id-consensus":{"id":"id-consensus","title":"11. Consensus","description":"11.1. BABE digest messages","sidebar":"tutorialSidebar"},"id-cryptography-encoding":{"id":"id-cryptography-encoding","title":"Appendix A: Cryptography & Encoding","description":"The appendix chapter contains various protocol details.","sidebar":"tutorialSidebar"},"id-extrinsics":{"id":"id-extrinsics","title":"9. Extrinsics","description":"9.1. Introduction","sidebar":"tutorialSidebar"},"id-glossary":{"id":"id-glossary","title":"Glossary","description":"$_{{n}}$","sidebar":"tutorialSidebar"},"id-polkadot-protocol":{"id":"id-polkadot-protocol","title":"Polkadot Protocol","description":"The specifications are not actively maintained by the Web3 Foundation as of 02/10/2024. Please follow the RCF Process for latest protocol updates.","sidebar":"tutorialSidebar"},"id-weights":{"id":"id-weights","title":"10. Weights","description":"10.1. Motivation","sidebar":"tutorialSidebar"},"Implementation Guide/faq":{"id":"Implementation Guide/faq","title":"FAQ","description":"WIP","sidebar":"tutorialSidebar"},"Implementation Guide/index":{"id":"Implementation Guide/index","title":"Implementation Guide","description":"This is the Implementation Guide [WIP!].","sidebar":"tutorialSidebar"},"part-polkadot-host":{"id":"part-polkadot-host","title":"Polkadot Host","description":"With the current document, we aim to specify the Polkadot Host part of the Polkadot protocol as a replicated state machine. After defining the different types of hosts in Chapter 1, we proceed to specify the representation of a valid state of the Protocol in Chapter 2. We also identify the protocol states by explaining the Polkadot state transition and discussing the detail based on which the Polkadot Host interacts with the state transition function, i.e., Runtime, in the same chapter. Following, we specify the input messages triggering the state transition and the system behavior. In Chapter 4, we specify the communication protocols and network messages required for the Polkadot Host to communicate with other nodes in the network, such as exchanging blocks and consensus messages. In Chapter 5 and Chapter 6, we specify the consensus protocol, which is responsible for keeping all the replicas in the same state. Finally, the initial state of the machine is identified and discussed in Section A.3.3.. A Polkadot Host implementation that conforms with this part of the specification should successfully be able to sync its states with the Polkadot network.","sidebar":"tutorialSidebar"},"part-polkadot-runtime":{"id":"part-polkadot-runtime","title":"Polkadot Runtime","description":"Description of various useful Runtime internals","sidebar":"tutorialSidebar"},"sect-block-production":{"id":"sect-block-production","title":"5. Block Production","description":"5.1. Introduction","sidebar":"tutorialSidebar"},"sect-finality":{"id":"sect-finality","title":"6. Finality","description":"6.1. Introduction","sidebar":"tutorialSidebar"},"sect-lightclient":{"id":"sect-lightclient","title":"7. Light Clients","description":"7.1. Requirements for Light Clients","sidebar":"tutorialSidebar"},"sect-metadata":{"id":"sect-metadata","title":"12. Metadata","description":"The runtime metadata structure contains all the information necessary on how to interact with the Polkadot runtime. Considering that Polkadot runtimes are upgradable and, therefore, any interfaces are subject to change, the metadata allows developers to structure any extrinsics or storage entries accordingly.","sidebar":"tutorialSidebar"},"Support Docs/privacy_policy":{"id":"Support Docs/privacy_policy","title":"Privacy Policy","description":"Updated December 2022"}}}')}}]);